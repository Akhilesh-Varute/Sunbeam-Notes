Day 7
1. import test_hibernate_basic in your workspace (if not done already) n download hibernate dependencies.

2. Refer to "day7-data\day7_help\IPL sql.txt"
Refer to teams table .
WE will create a standalone demo to create n insert teams records.

Day 8
1. Copy day8.1 project in your workspace. Import it as existing Maven Project
Edit DB password , from hibernate.cfg.xml
1.1 Open com.app.tester
Go through the testers , to revise today's work.
You can either go through Tester ---> DAO method invocations
OR 
you can try writing on your own (only some of the requirements)

2. In 2nd half (around 4:30 PM) , solve the assignment
We will first discuss n then you will try to solve.
2.1 Continue with day7_lab (where you already have Team POJO n DAO)
Insert some teams (using AddNewTeam tester)
Solve these objectives
1. Display  team id n abbreviation of all the teams
i/p : no inputs
Tester --> Team Dao instance --> invoke dao's method
DAO : jpql : select new com.app.pojos.Team(teamId,abbreviation) from Team t
try : session.createQuery(jpql,Team.class).getResultList() 
Add matching ctor in Team class

2. Display team details , of a team by it's id
i/p : team id
o/p : team details or null
DAO : session.get(Team.class,teamId)


3. Display all those teams who need , player's max age < specific age n min no of wickets taken > specified wickets
i/p : age , no of wickets
DAO : select t from Team t where t.maxAge < :age and t.wicketsTaken > :wkts
list=session.createQuery(jpql,Team.class).setParameter.....getResultList();

4. Update max age n batting avg requirement of a specific team by it's name (team name is unique)
i/p team name , new max age n batting avg
Hint : 
DAO : jpql=select t from Team t where t.name=:teamName
Team t=session.createQuery(jpql,Team.class).setParameter(...).getSingleResult();
// t : persistent
//call setters : 2
tx.commit()  --update 1

5. Delete team details
i/p : team id
Hint :Team myTeam =session.get(Team.class,teamId)
null checking ---not null --myTeam : persistent
session.delete(myTeam); //myTeam : REMOVED
tx.commit(); //delete query , session.close() --L1 cache gone -- removed from L1 cache --> myTeam : transient


Day 9
1. Copy n import day9.1 n day 9.2 in your workspace.

2. From day9.1 
Revise Storing n restoring of images

3. From day9.1 
Revise 
3.1 JPA inheritance
3.2 JPA associations (one --many bi dir association)

4. You have already copied n imported web_maven_hibernate in your workspace 
It should have Tomcat server.
Fix build path related issues.
Edit DB password from "hibernate.cfg.xml" under <src>\<main>\<resources>
Run the web app
R click --Run as --Run on server --Tomcat
Confirm from the console , hibernate up n running.

Objective : IPL demo

Steps 
4.1 Copy Team n Player pojos from ready code.
Team POJO , you have already created.

4.2 Copy TeamDao n it's implementation class
(from day9)
1. Get Team id n abbreviation for all teams.

4.3 Create PlayerDao 
2. Add new player to the team



Day 10
1. We will first complete IPL assignment n then revise
1.1 What is already completed on Day 9?
Lifted team id n abbreviations of all teams from Team Dao layer --> sent it to Java Bean (TeamBean)--> sent it to JSP --> add_player_form.jsp
Displayed it using dyn drop down list in a form.

${sessionScope.team.allTeams}
WC : session.getAttribute("team").getAllTeams() 



1.2 User will choose a team , fill up player details n submit the form.
URL ---> http://host:port/ctx_path/process_form.jsp

What will be the next step ?

In process_form.jsp :
1.3 Create instance of  Player bean , <jsp:useBean> n store under session scope.
1.4 Invoke matching setters
<jsp:setProperty>
1.5 Invoke PlayerBean's B.L method to validate n insert player details
eg : ${sessionScope.player.validateAndPlayer()}
WC : session.getAttribute("player").validateAndPlayer() : mesg (success / failure!)

2. In Player Bean : 
2.1 props : team id(myTeam) : int ,fn,ln,dob:String,avg,wickets
+ PlayerDao , TeamDao
2.2 Bean Def ctor : create player dao instance , team dao instance

2.3 getters n setters

2.4 Add B.L method for validation n insertion
public String validateAndPlayer()
{
 1. Get team details from team id : simply call team dao's method n get team details
Team chosenTeam=teamDao.getTeamDetails(teamId);
2. validations 
LocalDate date=....
  int age=Period.between(date,LocalDate.now()).getYears();
  batting avg 
  wickets taken 
  In case of no validation errs : 
  simply call PlayerDao 's method to insert new player's details 
  method args : teamId , transient player object ref.
  rets : message
}


3. Team Dao 
Team getSelectedTeamDetails(Integer teamId)
Hint : session.get(...)

4. PlayerDao
String addPlayerDetails(Integer teamId,Player newPlayer)
Hint : session.get(...) --> Team --null --ret failure mesg
team.addPlayer(player) 
commit

1.1 Revise :  one to one mapping (shared PK approach)


Day 11
1. Copy day11.1 under your workspace , import it as existing Maven app .
Force update Maven project
Revise
1.1 Spring bean life cycle
1.2 Setter Based D.I

2. Make a copy in day11.2
Test Constructor based D.I

2.5 Can you provide some dependencies via Ctor based D.I n other via setter based D.I  : YES

ATM is dependent upon : cash component n transport layer.
So which is ABSOLUTELY mandatory depcy for the ATM , configure it accordingly. --cash (value) --ctor based

Which one is optional (i.e can be made available from init onwards) --configure it accordingly --transport layer --setter based D.I

3. Make a copy in day11.4
Test Factory based D.I

4. Refer to day10_ipl ,to complete IPL assignment
(in extra time later)

5. Copy day11_ER_practice under your workspace , import it as existing Maven app .
Force update Maven project
It's NOT a web app , it's a standalone application
Add uni dir Team ----> Owner , using Shared PK approach.
Owner details :
id , first name ,last name , email .

Choose the terms : one/many , parent / child , owning / inverse
owner : one , parent (no inverse side here : uni dir asso)
team : one , child , owning (FK ---> owner 's id)

How will you solve this ?
1. From Team POJO 
1.1 remove owner property
1.2 Add a property
.....: Which annotations ? (name="owner_id")
private Owner teamOwner;
g/s
1.3 Add <mapping> entry in hibernate.cfg.xml

1.4 Run TestHibernate
new table : owners
cols : owner_id(PK , FK)  , first name ,last name , email 

-----Mandatory  till here -----------
Next part is optional BUT recommended !

5.1 Add new owner.
5.2 Add Team for specified owner.
i/p : owner email , team details
Team Dao : 
public String addTeamToOwner(String ownerEmail,Team newTeam);
.......




5.3 Update team details 
5.4 Remove Team Details


Test it using testers.


Day 12

Objectives
1. Test Spring MVC Flow

2. Deliver/render the index.jsp from SC (using spring MVC architecture)
2.1 removed entry of welcome-file  from web.xml
2.2 placed index.jsp : under <views>
2.3 Add HomePageController 
@Controller
@RequestMapping("/") 
....return "/index";


3. Test Model n View
4. Test Model Map
5. Enter Case study (EMS) : for spring hibernate integration (w/o spring boot)
5.1 List All Departments


Day 13
1. Copy n import day13_boot2 in your workspace .
Force update maven project.

OR 

Steps are in "Day13-data\day13_help\spring boot\spring-boot-steps.txt"
you can create spring boot project from Spring starter project (from scratch)
Choose dependencies. 
From pom.xml , change spring boot version to 2.7.18 n JDK version to 11
Force update. 

First approach will be faster. YOu can try 2nd approach , later in the labs.


2. Refer to "Day13-data\day13_help\lab assignment.png"
Try to complete it.

You will need extra help n hints . It's provided in "Day13-data\day13_help\readmes\Spring MVC Details.txt"

We will discuss it whenever required.


Day 14
1. Copy n import day14_REST in your workspace.
Force update.

1.1 Check if lombok annotations ,  getters n setters are working .
Otherwise install lombok JAR 
If it doesn't work , continue with the older approach(We will resolve it later !)


1.2 Revise 2 end points : GET n POST
Test them using postman or swagger.
Test them with React App.

1.3 We will complete update n delete , in a combined lab session.

2. In 2nd half , you will create on your own , a backend project
(using spring boot backend template) 
Either create it for your existing react app
OR 
Create Product based solution
Product attributes 
id (from BaseEntity : Long) , name (unique) , description ,category(enum) , price , available stock(int),expiryDate:LocalDate

Create end points for CRUD
Details will be discussed later.
1. Entity Layer
2. DAO
3. Service
4. ProductController

5. (Write a test case to fill up products)
API end points 
5.1 Get all products
http://localhost:8080/products
Method : GET

5.2 Add new product
http://localhost:8080/products
method : POST

5.3 Get Product by it's id
http://localhost:8080/products/{productId}
Method : GET

5.4 Get Products by it's category
http://localhost:8080/products/{categoryName}
Method : GET
Hint : List<Product> findByCategory(Category cat)

5.5 Update product details
http://localhost:8080/products
Method : PUT

5.6 Delete Product details
http://localhost:8080/products/{productId}
Method : DELETE








Method
4.












