The code below is a hint for you. It will not work as it is.
Mainly you need to declare right POJOs and handle Date conversions correctly.


MovieDaoImpl class
===============================
	public List<Movie> findAll() throws Exception {
		List<Movie> list = new ArrayList<>();
		String sql = "SELECT * FROM movies";
		try(PreparedStatement stmt = con.prepareStatement(sql)) {
			try(ResultSet rs = stmt.executeQuery()) {
				while(rs.next()) {
					int id = rs.getInt("id");
					String title = rs.getString("title");
					Date modified = DateTimeUtil.sqlDateToUtilDate(rs.getDate("rel_date"));
					Movie m = new Movie(id, title, modified);
					list.add(m);
				}
			} // rs.close();
		} // stmt.close();
		return list;
	}	

	public Movie findById(int id) throws Exception {
		String sql = "SELECT * FROM movies WHERE id=?";
		try(PreparedStatement stmt = con.prepareStatement(sql)) {
			stmt.setInt(1, id);
			try(ResultSet rs = stmt.executeQuery()) {
				if(rs.next()) {
					id = rs.getInt("id");
					String title = rs.getString("title");
					Date modified = DateTimeUtil.sqlDateToUtilDate(rs.getDate("rel_date"));
					Movie m = new Movie(id, title, modified);
					return m;
				}
			} // rs.close();
		} // stmt.close();
		return null;
	}	


ReviewDaoImpl class
===============================

	public int save(Review r) throws Exception {
		String sql = "INSERT INTO reviews(id, movie_id, review, rating, user_id, modified) VALUES(default, ?, ?, ?, ?, ?)";
		try(PreparedStatement stmt = con.prepareStatement(sql)) {
			stmt.setInt(1, r.getMovieId());
			stmt.setString(2, r.getReview());
			stmt.setInt(3, r.getRating());
			stmt.setInt(4, r.getUserId());
			stmt.setTimestamp(5, DateTimeUtil.utilDateToSqlTs(r.getModified()));
			int count = stmt.executeUpdate();
			return count;
		} //stmt.close();		
	}
	
	public int update(Review r) throws Exception {
		String sql = "UPDATE reviews SET movie_id=?, review=?, rating=?, user_id=?, modified=? WHERE id=?";
		try(PreparedStatement stmt = con.prepareStatement(sql)) {
			stmt.setInt(1, r.getMovieId());
			stmt.setString(2, r.getReview());
			stmt.setInt(3, r.getRating());
			stmt.setInt(4, r.getUserId());
			stmt.setTimestamp(5, DateTimeUtil.utilDateToSqlTs(r.getModified()));
			stmt.setInt(6, r.getId());
			int count = stmt.executeUpdate();
			return count;
		} //stmt.close();		
	}

	public List<Review> findAll() throws Exception {
		List<Review> list = new ArrayList<Review>();
		String sql = "SELECT * FROM reviews ORDER BY modified DESC";
		try(PreparedStatement stmt = con.prepareStatement(sql)) {
			try(ResultSet rs = stmt.executeQuery()) {
				while(rs.next()) {
					int id = rs.getInt("id");
					int movieId = rs.getInt("movie_id");
					String review = rs.getString("review");
					int rating = rs.getInt("rating");
					int userId = rs.getInt("user_id");
					Date modified = DateTimeUtil.sqlTsToUtilDate(rs.getTimestamp("modified"));
					Review r = new Review(id, movieId, userId, review, rating, modified);
					list.add(r);
				}
			} // rs.close();
		} // stmt.close();
		return list;
	}
	
	public List<Review> findByUserId(int userId) throws Exception {
		List<Review> list = new ArrayList<Review>();
		String sql = "SELECT * FROM reviews WHERE user_id=? ORDER BY modified DESC";
		try(PreparedStatement stmt = con.prepareStatement(sql)) {
			stmt.setInt(1, userId);
			try(ResultSet rs = stmt.executeQuery()) {
				while(rs.next()) {
					int id = rs.getInt("id");
					int movieId = rs.getInt("movie_id");
					String review = rs.getString("review");
					int rating = rs.getInt("rating");
					int usrId = rs.getInt("user_id");
					Date modified = DateTimeUtil.sqlTsToUtilDate(rs.getTimestamp("modified"));
					Review r = new Review(id, movieId, usrId, review, rating, modified);
					list.add(r);
				}
			} // rs.close();
		} // stmt.close();
		return list;
	}
	
	public List<Review> getSharedWithUser(int userId) throws Exception {
		List<Review> list = new ArrayList<Review>();
		String sql = "SELECT r.* FROM reviews r INNER JOIN shares s ON r.id=s.review_id WHERE s.user_id=? ORDER BY modified DESC";
		try(PreparedStatement stmt = con.prepareStatement(sql)) {
			stmt.setInt(1, userId);
			try(ResultSet rs = stmt.executeQuery()) {
				while(rs.next()) {
					int id = rs.getInt("id");
					int movieId = rs.getInt("movie_id");
					String review = rs.getString("review");
					int rating = rs.getInt("rating");
					int usrId = rs.getInt("user_id");
					Date modified = DateTimeUtil.sqlTsToUtilDate(rs.getTimestamp("modified"));
					Review r = new Review(id, movieId, usrId, review, rating, modified);
					list.add(r);
				}
			} // rs.close();
		} // stmt.close();
		return list;
	}

	public Review findById(int id) throws Exception {
		String sql = "SELECT * FROM reviews WHERE id=?";
		try(PreparedStatement stmt = con.prepareStatement(sql)) {
			stmt.setInt(1, id);
			try(ResultSet rs = stmt.executeQuery()) {
				while(rs.next()) {
					id = rs.getInt("id");
					int movieId = rs.getInt("movie_id");
					String review = rs.getString("review");
					int rating = rs.getInt("rating");
					int usrId = rs.getInt("user_id");
					Date modified = DateTimeUtil.sqlTsToUtilDate(rs.getTimestamp("modified"));
					Review r = new Review(id, movieId, usrId, review, rating, modified);
					return r;
				}
			} // rs.close();
		} // stmt.close();
		return null;
	}

	public int deleteById(int reviewId) throws Exception {
		String sql = "DELETE FROM reviews WHERE id=?";
		try (PreparedStatement stmt = con.prepareStatement(sql)) {
			stmt.setInt(1, reviewId);
			int count = stmt.executeUpdate();
			return count;
		}
	}

	public int shareReview(int reviewId, int userId) throws Exception {
		String sql = "INSERT INTO shares(review_id, user_id) VALUES (?, ?)";
		try (PreparedStatement stmt = con.prepareStatement(sql)) {
			stmt.setInt(1, reviewId);
			stmt.setInt(2, userId);
			int count = stmt.executeUpdate();
			return count;
		}
		catch (SQLIntegrityConstraintViolationException e) {
			// do nothing
		}
		return 0;
	}

UserDaoImpl class
===============================
	public int save(User u) throws Exception {
		String sql = "INSERT INTO users(id, first_name, last_name, email, mobile, birth, password) VALUES(default, ?, ?, ?, ?, ?, ?)";
		try(PreparedStatement stmt = con.prepareStatement(sql)) {
			stmt.setString(1, u.getFirstName());
			stmt.setString(2, u.getLastName());
			stmt.setString(3, u.getEmail());
			stmt.setString(4, u.getMobile());
			stmt.setDate(5, DateTimeUtil.utilDateToSqlDate(u.getBirth()));
			stmt.setString(6, u.getPassword());
			int count = stmt.executeUpdate();
			return count;
		} //stmt.close();
	}
	
	public int update(User u) throws Exception {
		String sql = "UPDATE users SET first_name=?, last_name=?, mobile=?, birth=? WHERE id=?";
		try(PreparedStatement stmt = con.prepareStatement(sql)) {
			stmt.setString(1, u.getFirstName());
			stmt.setString(2, u.getLastName());
			stmt.setString(3, u.getEmail());
			stmt.setDate(4, DateTimeUtil.utilDateToSqlDate(u.getBirth()));
			stmt.setInt(5, u.getId());
			int count = stmt.executeUpdate();
			return count;
		} //stmt.close();
	}

	public int updatePassword(int userId, String newPassword) throws Exception {
		String sql = "UPDATE users SET password=? WHERE id=?";
		try(PreparedStatement stmt = con.prepareStatement(sql)) {
			stmt.setString(1, newPassword);
			stmt.setInt(2, userId);
			int count = stmt.executeUpdate();
			return count;
		} //stmt.close();
	}

	public User findByEmail(String email) throws Exception {
		String sql = "SELECT * FROM users WHERE email=?";
		try(PreparedStatement stmt = con.prepareStatement(sql)) {
			stmt.setString(1, email);
			try(ResultSet rs = stmt.executeQuery()) {
				while(rs.next()) {
					int id = rs.getInt("id");
					String fname = rs.getString("first_name");
					String lname = rs.getString("last_name");
					String password = rs.getString("password");
					email = rs.getString("email");
					String mobile = rs.getString("mobile");
					Date uDate = DateTimeUtil.sqlDateToUtilDate(rs.getDate("birth"));
					return new User(id, fname, lname, email, password, uDate, mobile);
				}
			} // rs.close();
		} // stmt.close();
		return null;
	}

	public List<User> findAll() throws Exception {
		List<User> list = new ArrayList<User>();
		String sql = "SELECT * FROM users";
		try(PreparedStatement stmt = con.prepareStatement(sql)) {
			try(ResultSet rs = stmt.executeQuery()) {
				while(rs.next()) {
					int id = rs.getInt("id");
					String fname = rs.getString("first_name");
					String lname = rs.getString("last_name");
					String password = rs.getString("password");
					String email = rs.getString("email");
					String mobile = rs.getString("mobile");
					Date uDate = DateTimeUtil.sqlDateToUtilDate(rs.getDate("birth"));
					User u = new User(id, fname, lname, email, password, uDate, mobile);
					list.add(u);
				}
			} // rs.close();
		} // stmt.close();
		return list;
	}
	
